#!/bin/sh
set -e; set -u

# ignores initial $PWD; everything by default inside MYDIR
MYDIR=$(dirname -- "${ZSH_ARGZERO:-$0}"); cd "$MYDIR"; MYDIR=$PWD
if [ ! -r "$MYDIR"/min-template.sh ]; then
  busybox wget -q 'https://gitlab.com/kstr0k/bashaaparse/-/raw/master/min-template.sh'
fi
. "$MYDIR"/min-template.sh
__which1() { __min_template_util which1 '' "$@"; }

_O_busybox_src=$HOME/src/busybox
_O_f8ksh_dir=$HOME/src/f8ksh
_O_setup_shells=true _O_runs=48 _O_date=udate
_O_kak=$(__which1 kak)

benchmark() {
  local "$@"
  rm -f /tmp/fakesh.log

  local cmdlog; cmdlog=$("$_O_f8ksh_dir"/util/logcmdname --fmt='cmdlog-$CMD' -- hyperfine -w 2 -r $_O_runs -s basic \
    "KKPSH=\"$KKPSH\" PATH=\"${PPATH:+$PPATH:}\$PATH\" $KKRUNCMD")
  mv "$cmdlog" logs/extra
  test -r /tmp/fakesh.log || return 0
  ls -al /tmp/fakesh.log
  local log; log=logs/extra/"$(s=${KKPSH%/fakesh.sh}; echo "${s##*/}")${PPATH:+_PPATH}${BMSFX:+_$BMSFX}"_fakesh.log
  mv /tmp/fakesh.log "$log"
  local db; db=logs/${log##*/}; db=${db%.log}.sqlite3
  { time $_G_static_sh "$_O_f8ksh_dir"/fakesh-log-conv --logfunc=2sql <"$log"; } | sqlite3 "$db"
  zstd --rm "$log" || gzip "$log" || :
}

setup_shells() (
  mkdir -p /tmp/bboxsh
  : "${MAKEFLAGS:=-j8}"

  if [ "$_O_busybox_src" ]; then
  "$_O_f8ksh_dir"/setup-bbox --clear --busybox=make --busybox-src="$_O_busybox_src" --busybox-config-nofork /tmp/bboxsh/builtin+nofork
  "$_O_f8ksh_dir"/setup-bbox --clear --busybox=make --busybox-src="$_O_busybox_src" /tmp/bboxsh/builtin
  "$_O_f8ksh_dir"/setup-bbox --clear --busybox=make --busybox-src="$_O_busybox_src" --no-busybox-config-static /tmp/bboxsh/builtin+dynld
# "$_O_f8ksh_dir"/setup-bbox --clear --busybox=debian /tmp/bboxsh/deb-static
  # alpine has 1.33, no applet bias, strips date +%N (!!); use it for comparison instead of yet another =make
  fi
  "$_O_f8ksh_dir"/setup-bbox --clear --busybox=alpine /tmp/bboxsh/links

  lnpath() { local p; p=$(command -v "$1" 2>/dev/null || :); ! [ -x "$p" ] || ln -s "$p" "$2"; }
# lnpath zsh  /tmp/bboxsh/builtin/zsh
  lnpath bash /tmp/bboxsh/builtin/bash
  lnpath yash /tmp/bboxsh/builtin/yash
)

__process_arg() { return 1; }

benchmark_sh_source() (
  cd
  export _kkpsh=.config/kak/plugins/plug.kak/rc/plug.sh
  [ -r "$_kkpsh" ] || { echo 1>&2 "No $_kkpsh ; skipping benchmark" && return 0; }
  code=$(cat "$_kkpsh"; echo X); code=${code%X}; export code
  local ll cmd=  #; cmd='for i in $(seq 2); do plug_list; done'
  set --; while IFS= read -r ll; do set -- "$@" "$ll; $cmd"; done <<'EOF'
. "$_kkpsh" --
eval . "$_kkpsh" --
eval "$code"
eval "__wrap() { $code }"; __wrap
t=$(mktemp); echo "$code" >"$t"; . "$t"; rm -f "$t"
EOF
  hyperfine -r 100 -w 2 -S sh --export-markdown "$MYDIR"/logs/sh-load-code.md "$@"
  hyperfine -r 100 -w 2 -S "$_G_static_sh" --export-markdown "$MYDIR"/logs/static_sh-load_code.md "$@"
)

__setup_date() {
  _G_srv_pid=
  _G_srv_fifo=/tmp/bm-nsecsrv
  case "$_O_date" in
    udate)
      cp "$_O_f8ksh_dir"/util/udate.c .
      CFLAGS='-static -O3 -march=native -Wall' make udate; strip udate
      F8KSH_FAKESH_DATE=/tmp/bboxsh/builtin+nofork/udate
      cp udate "$F8KSH_FAKESH_DATE"
      ;;
    fifosrv)
      /tmp/bboxsh/builtin+nofork/busybox sh "$_O_f8ksh_dir"/util/fifo-srv.sh "$_G_srv_fifo" </dev/null >"$_G_srv_fifo".log 2>&1 &
      _G_srv_pid=$!
      F8KSH_FAKESH_DATE='head -1 <'"$_G_srv_fifo"
      printf 'fifo-srv started at %s\n' "$(eval "$F8KSH_FAKESH_DATE")"
      ;;
    sysdate)
      F8KSH_FAKESH_DATE="$(exec 2>/dev/null; __which1 gdate date) +%s%N"
      ;;
    date) F8KSH_FAKESH_DATE='date +%s%N' ;;  # not on alpine busybox (strips %N)
    /*|*' '*|now=*)
          F8KSH_FAKESH_DATE="$_O_date"   ;;  # pass thru
    *) unset Bad && : "${Bad?--date="$_O_date", most likely}" ;;
  esac
  export F8KSH_FAKESH_DATE
  echo 1>&2 "Using date command: $F8KSH_FAKESH_DATE"
}

__cleanup() {
  if test -n "$_G_srv_pid"; then
    touch "$_G_srv_fifo".quit || :
    (printf '%s' 'Final tstamp'; eval "$F8KSH_FAKESH_DATE" || :)
    sleep 1; kill "$_G_srv_pid" 2>/dev/null || :
    rm -f "$_G_srv_fifo" "$_G_srv_fifo".quit
  fi
}

__main() {
local MYDIR; MYDIR=${0%/*}; cd -P "${MYDIR:-/}"; MYDIR=$PWD;
! $_O_setup_shells || setup_shells
_G_static_sh=$(__which1 /tmp/bboxsh/builtin+nofork/sh static-sh sh)
rm -rf logs; mkdir -p logs logs/extra

PATH=$MYDIR:$PATH
KKBIN=$_O_kak; export KKBIN
KKRUNCMD=kakrun; export KKRUNCMD
cat >"$KKRUNCMD" <<'EOF'
#!/bin/sh
KAKOUNE_POSIX_SHELL=$KKPSH exec "$KKBIN" -ui json -e quit
EOF
chmod +x "$KKRUNCMD"
pwd

benchmark_sh_source
benchmark_kak
benchmark_kak_f8ksh

__cleanup
}

benchmark_kak_f8ksh() {
[ -d "$_O_f8ksh_dir" ] || { echo 1>&2 "No $_O_f8ksh_dir ; skipping benchmark" && return 0; }
__setup_date
export F8KSH_FAKESH_DEBUG=true
#export F8KSH_FAKESH_LOGDIR="$MYDIR/logs"

# busybox=make has EPOCHREALTIME and fakesh uses it automatically
benchmark KKPSH="$_O_f8ksh_dir/fakesh.sh" PPATH=
benchmark KKPSH=/tmp/bboxsh/links/fakesh.sh PPATH=/tmp/bboxsh/links
benchmark KKPSH=/tmp/bboxsh/links/fakesh.sh PPATH=
benchmark KKPSH=/tmp/bboxsh/builtin/fakesh.sh PPATH=
benchmark KKPSH=/tmp/bboxsh/builtin+nofork/fakesh.sh PPATH=
benchmark KKPSH=/tmp/bboxsh/builtin+dynld/fakesh.sh PPATH=
F8KSH_FAKESH_DATE= \
benchmark KKPSH=/tmp/bboxsh/builtin/fakesh.sh PPATH= BMSFX=BBDATE
F8KSH_FAKESH_DATE= \
benchmark KKPSH=/tmp/bboxsh/builtin+nofork/fakesh.sh PPATH= BMSFX=BBDATE
}

benchmark_kak() (
set --; while IFS= read -r ll; do
  case "$ll" in '#'*) ;; *)
    ! test -x "$(ll=${ll#KKPSH=}; ll=${ll% *}; echo "$ll")" || set -- "$@" "$ll" ;;
  esac
done <<EOF
KKPSH=/tmp/bboxsh/builtin/binsh $KKRUNCMD
#KKPSH=/tmp/bboxsh/builtin/zsh-sh $KKRUNCMD
#KKPSH=/tmp/bboxsh/builtin/bash $KKRUNCMD
#KKPSH=/tmp/bboxsh/builtin/yash $KKRUNCMD
KKPSH=/tmp/bboxsh/links/sh PATH="/tmp/bboxsh/links:\$PATH" $KKRUNCMD
KKPSH=/tmp/bboxsh/links/sh $KKRUNCMD
KKPSH=/tmp/bboxsh/builtin/sh $KKRUNCMD
KKPSH=/tmp/bboxsh/builtin+nofork/sh $KKRUNCMD
KKPSH=/tmp/bboxsh/builtin+dynld/sh $KKRUNCMD
EOF
#printf '%s\n' "$@"
hyperfine -w 2 -r $_O_runs -S $_G_static_sh \
  --export-markdown logs/kak_startup.md \
  --export-csv logs/kak_startup.csv \
  --export-json logs/kak_startup.json \
  "$@"
)

__parse_args "$@"

#vd logs/kak_startup.json
#(for f in logs/*.sqlite3; do printf '%s\t%s\n' "$f" "$(sqlite3 "$f" '.mode line' 'SELECT tdelta_avg / 1000000.0 as dt from cmd_stat order by dt desc limit 1')"; done) 2>/dev/null | sed -e 's/^  *//' | vd
