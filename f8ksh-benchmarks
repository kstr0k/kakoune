#!/bin/sh
set -e; set -u

_O_busybox_src=$HOME/src/busybox
_O_f8ksh_dir=$HOME/src/f8ksh
_O_setup_shells=true _O_runs=48

benchmark() {
  local "$@"
  rm -f /tmp/fakesh.log

  local cmdlog; cmdlog=$("$_O_f8ksh_dir"/util/logcmdname --fmt='cmdlog-$CMD' -- hyperfine -w 2 -r $_O_runs -s basic \
    "KAKOUNE_POSIX_SHELL=\"$KAKOUNE_POSIX_SHELL\" PATH=\"${PPATH:+$PPATH:}\$PATH\" $CMD")
  sed -i -e '1s@\&>.*@@' "$cmdlog"
  mv "$cmdlog" logs/extra
  test -r /tmp/fakesh.log || return 0
  ls -al /tmp/fakesh.log
  local log; log=logs/extra/"$(s=${KAKOUNE_POSIX_SHELL%/fakesh.sh}; echo "${s##*/}")${PPATH:+_PPATH}${BMSFX:+_$BMSFX}"_fakesh.log
  mv /tmp/fakesh.log "$log"
  local db; db=logs/${log##*/}; db=${db%.log}.sqlite3
  $_G_static_sh ~/Projects/f8ksh/fakesh-log-conv --logfunc=2sql <"$log" | sqlite3 "$db"
  zstd --rm "$log" || gzip "$log" || :
}

setup_shells() {
  MAKEFLAGS=-j8 "$_O_f8ksh_dir"/setup-bbox --clear --busybox=make --busybox-src="$_O_busybox_src" --busybox-config-nofork /tmp/bboxsh/builtin+nofork
  MAKEFLAGS=-j8 "$_O_f8ksh_dir"/setup-bbox --clear --busybox=make --busybox-src="$_O_busybox_src" /tmp/bboxsh/builtin
# "$_O_f8ksh_dir"/setup-bbox --clear --busybox=debian /tmp/bboxsh/deb-static
  "$_O_f8ksh_dir"/setup-bbox --clear --busybox=alpine /tmp/bboxsh/links
}

# adapted min-template.sh (https://git@gitlab/kstr0k/bashaaparse)
__usage() {  # args: header footer
  local flags
  flags=$(set | sed -ne 's/^_O_\([^=]\+\)=.*/\1/p')
  printf '%s'${1:+'\n'}  "${1:-}"  # add \n only if missing
  test -z "$flags" || printf -- '--%s=ARG\n'  $(printf '%s'  "$flags" | sed -e 's/_/-/g')
  printf '%s'${2:+'\n'}  "${2:-}"
}
__parse_args() {
  local k
  test $# -gt 0 || set -- --
  if ! __process_arg "$@"; then
    case "$1" in
      -v) set -x ;;
      -h|--help|--usage|-'?') __usage 'Options:'; exit 0 ;;
      --*=*)
        k=${1%%=*}; k=_O_$(echo "${k#--}" | sed -e 's/-/_/g')
        eval "$k"'=$(printf "%sX"  "${1#--*=}");' "$k=\${$k%X}"
        ;;
      --exit) return 0 ;;
      --no-?*) k=$1; shift; __parse_args "--${k#--no-}=false" "$@"; return ;;
      --?*)    k=$1; shift; __parse_args "$k=true"            "$@"; return ;;
      --) shift; __main "$@"; return $? ;;
      *)         __main "$@"; return $? ;;
    esac
  fi
  shift; __parse_args "$@"
}
__process_arg() { false; }

benchmark_sh_source() (
  cd
  export _kkpsh=.config/kak/plugins/plug.kak/rc/plug.sh
  code=$(cat "$_kkpsh"; echo X); code=${code%X}; export code
  local ll cmd=  #; cmd='for i in $(seq 2); do plug_list; done'
  set --; while IFS= read -r ll; do set -- "$@" "$ll; $cmd"; done <<'EOF'
. "$_kkpsh" --
eval . "$_kkpsh" --
eval "$code"
eval "__wrap() { $code }"; __wrap
t=$(mktemp); echo "$code" >"$t"; . "$t"; rm -f "$t"
EOF
  hyperfine -r 100 -w 2 -S sh --export-markdown "$MYDIR"/logs/sh-load-code.md "$@"
  hyperfine -r 100 -w 2 -S "$_G_static_sh" --export-markdown "$MYDIR"/logs/static_sh-load_code.md "$@"
)

__main() {
local MYDIR; MYDIR=${0%/*}; cd -P "${MYDIR:-/}"; MYDIR=$PWD;
! $_O_setup_shells || setup_shells
_G_static_sh=$(which /tmp/bboxsh/builtin+nofork/sh static-sh sh 2>/dev/null | head -1)
rm -rf logs; mkdir -p logs logs/extra
export F8KSH_FAKESH_DATE="$(which /tmp/bboxsh/builtin+nofork/udate $_O_f8ksh_dir/util/udate | head -1) +%s%N"
export F8KSH_FAKESH_DEBUG=true
#export F8KSH_FAKESH_LOGDIR="$MYDIR/logs"
PATH=/usr/local/bin:$PATH
CMD=kak\ -ui\ json\ -e\ \'quit\'
pwd

benchmark_sh_source
benchmark_kak

benchmark KAKOUNE_POSIX_SHELL="$_O_f8ksh_dir/fakesh.sh" PPATH=
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/links/fakesh.sh PPATH=/tmp/bboxsh/links
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/links/fakesh.sh PPATH=
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin/fakesh.sh PPATH=
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin+nofork/fakesh.sh PPATH=
F8KSH_FAKESH_DATE='date +%s%N' \
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin/fakesh.sh PPATH= BMSFX=BBDATE
F8KSH_FAKESH_DATE='date +%s%N' \
benchmark KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin+nofork/fakesh.sh PPATH= BMSFX=BBDATE
}

benchmark_kak() (
set --; while IFS= read -r ll; do set -- "$@" "$ll"; done <<EOF
KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin/binsh $CMD
KAKOUNE_POSIX_SHELL=/tmp/bboxsh/links/sh PATH="/tmp/bboxsh/links:\$PATH" $CMD
KAKOUNE_POSIX_SHELL=/tmp/bboxsh/links/sh $CMD
KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin/sh $CMD
KAKOUNE_POSIX_SHELL=/tmp/bboxsh/builtin+nofork/sh $CMD
EOF
hyperfine -w 2 -r $_O_runs -S $_G_static_sh \
  --export-markdown logs/kak_startup.md --export-csv logs/kak_startup.csv --export-json logs/kak_startup.json "$@"
)

__parse_args "$@"

#vd logs/kak_startup.json
#(for f in logs/*.sqlite3; do printf '%s\t%s\n' "$f" "$(sqlite3 "$f" '.mode line' 'SELECT tdelta_avg / 1000000.0 as dt from cmd_stat order by dt desc limit 1')"; done) 2>/dev/null | sed -e 's/^ \+//' | vd
